<?xml version='1.0' encoding='utf-8'?>
<!DOCTYPE hibernate-configuration PUBLIC
    "-//Hibernate/Hibernate Configuration DTD//EN"
    "http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
  <session-factory>
    <property name="connection.url">jdbc:mysql://localhost:3306/schedulecapstone</property>
    <property name="connection.username">root</property>
    <property name="connection.password">2030bubbletea</property>
    <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
    <property name="dialect">org.hibernate.dialect.MySQL57Dialect</property>

    <property name="show_sql">true</property>

    <property name="format_sql">true</property>
    <property name="hbm2ddl.auto">create</property>

    <!-- JDBC connection pool (use the built-in) -->
    <property name="connection.pool_size">1</property>
    <property name="current_session_context_class">thread</property>

    <!--mapping class="com.mastertheboss.domain.Employee" />
    <mapping class="com.mastertheboss.domain.Department" /-->
  </session-factory>
</hibernate-configuration>

entity class from database

<mapping class="temp.EmployeeConstraint"/>
    <mapping class="temp.Employees"/>
    <mapping class="temp.Notification"/>
    <mapping class="temp.ScheduledEmployee"/>
    <mapping class="Model.Shift"/>
    <mapping class="temp.ShiftTemplate"/>



1. create the final sql file, decise the final data type what data needed
2. jpa mapping
3. add the additional methods they made


mainly use localdate or localdatetime
retrieve data: util.Date to localdate
save data: string to util.Date?

mysql does not support localdate
1.use localdate, but firstly store the date value into string and then parse
to localdate

2.use date in java, datatime in mysql
https://stackoverflow.com/questions/2400955/how-to-store-java-date-to-mysql-datetime


        String input1 = "2007-02-07 17:29:46.00".replace( " " , "T" ) ;
        String input2 = "2008-02-07 17:29:46.00".replace( " " , "T" ) ;
        LocalDateTime dt1 = LocalDateTime.parse(input1);
        LocalDateTime dt2 = LocalDateTime.parse(input2);

        session.save(new Temp("john",2));

        session.getTransaction().commit();
        session.close();

//        Query q = session.createQuery("SELECT d FROM Day d WHERE d.dayId = 1");
//
//        List<Day> resultList = q.list();
//        System.out.println("day:" + resultList.size());
//        for (Day next : resultList) {
//            System.out.println("next day: " + next);


try {
            SessionFactory factory = new Configuration().configure().buildSessionFactory();

            Session session = factory.openSession();

            System.out.println(577);
            String input1 = "2007-02-07 17:29:46.00".replace( " " , "T" ) ;
            String input2 = "2008-02-07 17:29:46.00".replace( " " , "T" ) ;
            LocalDateTime dt1 = LocalDateTime.parse( input1 ) ;
            LocalDateTime dt2 = LocalDateTime.parse( input2 ) ;

            session.beginTransaction();
            session.save(new Day(dt1,dt2));
            session.getTransaction().commit();

            Day day = session.find(Day.class,1);
            System.out.println(day.getStartTime());

            Query q = session.createQuery("SELECT d FROM Day d WHERE d.dayId = 1");

            List<Day> resultList = q.list();
            System.out.println("day:" + resultList.size());
            for (Day next : resultList) {
                System.out.println("next day: " + next.getStartTime());
                session.close();
            }
        } catch (Throwable ex) {
            System.err.println("Failed to create sessionFactory object." + ex);
            throw new ExceptionInInitializerError(ex);
        }


Employee:
1,1
1,2
1,3

Day:
1,1
1,2
1,3

Shift:
1,1,1
2,1,1
3,1,1